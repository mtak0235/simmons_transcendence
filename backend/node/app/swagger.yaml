openapi: 3.0.0
info:
  description: "트센 API 명세"
  version: "1.2.0"
  title: "ft_transcendance"
  termsOfService: "https://"
  contact:
    email: "nfl1ryxditimo12@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
servers:
  - url: 'ec2-43-200-195-11.ap-northeast-2.compute.amazonaws.com'

# API 카테고리
tags:
  - name: Auth
    description: 사용자 인증 API
  - name: Users
    description: 사용자 정보 API

# API 문서
paths:

  /v0/auth/test/{userId}:
    get:
      tags:
        - Auth
      summary: ❗ 테스트용 토큰 발급 API ❗
      description: <h1>개발용 토큰 발급 간소화 API</h1><br>`process.env.NODE_ENV === local` 에서만 작동함
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
            example: "사용자 id, 기본값 85274"
          required: true
      responses:
        200:
          $ref: "#/components/responses/Ok-Cookie"

  /v0/auth/token:
    get:
      tags:
        - Auth
      summary: 토큰 재발급
      description: <h1>Access Token 만료 시 사용하는 API</h1><br><h2>만료된 Access Token과 유효한 Refresh 토큰을 전송해야 함</h2><br>`redis에 저장된 client 정보와 대조 후 유효하면 재발행이 됨`
      parameters:
        - in: header
          name: Authorization
          description: 만료된 Access Token을 입력한다.
          schema:
            $ref: "#/components/schemas/Cookie"
          required: true
        - in: header
          name: Cookie
          description: 유효한 Refresh Token을 입력한다.
          schema:
            type: string
            example: "refresh_token=\"이곳에 Token 입력\""
      responses:
        200:
          $ref: "#/components/responses/Ok-Cookie"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/ServerError"

  # 인증 API
  /v0/auth/login:
    get:
      tags:
        - Auth
      summary: 로그인
      description: <h1>42 OAuth를 이용한 로그인<br>42 Login Page로 리다이렉션 될 거임<h1/>
      responses:
        301:
          description: 42 Login page redirection
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/ServerError"

  /v0/auth/login/callback:
    get:
      tags:
        - Auth
      summary: 로그인 콜백
      description: <h1>42 OAuth redirect uri<h1/><br><h2>첫 로그인인 경우 회원 가입이 완료 되며 201 status가 응답 되고, /v0/auth/login/access로 추가 정보 입력을 요청해야 Access Token이 발급 됨<br><br>2단계 인증이 활성화 되어있는 경우 202 status와 인증코드가 해싱된 토큰이 반환되며, 사용자의 이메일로 인증 코드가 발송된다.<br><br>2단계 인증이 비활성인 경우 200 status가 응답 되고, Access Token이 발급 됨</h2>
      parameters:
        - in: query
          name: code
          schema:
            type: string
            example: 42 OAuth 인가코드 들어갈거임
          required: true
      responses:
        200:
          $ref: "#/components/responses/Ok-Cookie"
        201:
          description: <h2>회원가입 완료, 추가 정보 입력을 위해 sign이라는 토큰 반환</h2>
          headers:
            sign:
              schema:
                $ref: "#/components/schemas/sign"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  status:
                    type: "integer"
                    example: 201
                  message:
                    type: "string"
                    example: "회원가입 완료"
        202:
          description: <h2>로그인 성공, 추가로 2단계 인증 필요</h2>
          headers:
            code:
              schema:
                type: "string"
                example: 해싱된 이메일 인증코드가 담겨있음
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  status:
                    type: "integer"
                    example: 202
                  message:
                    type: "string"
                    example: "2단계 인증 필요"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/ServerError"

  /v0/auth/email-verify:
    get:
      tags:
        - Auth
      summary: 2단계 인증 (이메일)
      description: <h1>2단계 인증 확인을 위한 API</h1><br><h2>이메일로 온 6자리 인증코드를 Query String에 담아 전송해야 한다</h2><br>`인증코드 유효기간은 5분이다.`
      parameters:
        - in: header
          name: Authorization
          description: 쿠키로 발급받은 `code` 토큰을 밑 양식에 맞춰 전달한다.
          schema:
            $ref: "#/components/schemas/Cookie"
          required: true
        - in: query
          name: code
          description: 이메일로 전달받은 6자리 인증번호를 입력한다.
          schema:
            type: "string"
            example: 123456
      responses:
        200:
          $ref: "#/components/responses/Ok-Cookie"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/ServerError"

  /v0/auth/login/access:
    post:
      tags:
        - Auth
      summary: 추가 정보 입력
      description: <h1>최초 로그인 이후 추가 정보 입력 API</h1>
      parameters:
        - in: header
          name: Authorization
          description: 쿠키로 발급받은 `sign` 토큰을 밑 양식에 맞춰 전달한다.
          schema:
            $ref: "#/components/schemas/Cookie"
      requestBody:
        description: 수정하고 싶은 내용만 key-value 형태로 기입
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                displayName:
                  type: "string"
                  example: "seongsu  // 중복시 400 Bad Request"
                email:
                  type: "string"
                  example: "test@teest.com  // 이메일 양식 검사함"
                two_factor:
                  type: "boolean"
                  example: "true 또는 false"
                image:
                  type: "string"
                  example: "png, jpeg, jpg 총 3개의 확장자인 이미지 파일만 받아옴. form-data로 전송할 것"
      responses:
        200:
          $ref: "#/components/responses/Ok-Cookie"
        202:
          description: <h2>로그인 성공, 추가로 2단계 인증 필요</h2>
          headers:
            code:
              schema:
                type: "string"
                example: 해싱된 이메일 인증코드가 담겨있음
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  status:
                    type: "integer"
                    example: 202
                  message:
                    type: "string"
                    example: "2단계 인증 필요"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/ServerError"

  /v0/auth/logout:
    delete:
      tags:
        - Auth
      summary: 로그아웃
      description: <h1>서버 세션에서 클라이언트 정보 삭제됨</h1>
      parameters:
        - in: header
          name: Authorization
          description: '발급받은 `Access Token` 입력'
          schema:
            $ref: "#/components/schemas/Cookie"
          required: true

      responses:
        200:
          $ref: "#/components/responses/Ok"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/ServerError"

  # Users

  /v0/users/{user_id}/profile:
    get:
      tags:
        - Users
      summary: 사용자 프로필 조회
      description: <h1>사용자 프로필 조회</h1>
      parameters:
        - in: header
          name: Authorization
          description: '발급받은 `Access Token` 입력'
          schema:
            $ref: "#/components/schemas/Cookie"
          required: true
        - in: path
          name: user_id
          schema:
            type: integer
            example: "유저 id"
          required: true
      responses:
        200:
          description: <h2>성공</h2>
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  id:
                    type: number
                    example: "85274"
                  username:
                    type: string
                    example: "seonkim"
                  displayName:
                    type: string
                    example: "seongsu"
                  email:
                    type: string
                    example: "seonkim@student.42seoul.kr"
                  imagePath:
                    type: string
                    example: "https://ft-transcendence.s3.ap-northeast-2.amazonaws.com/profile/default_avatar.png"
                  firstAccess:
                    type: boolean
                    example: false
                  twoFactor:
                    type: boolean
                    example: true
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/ServerError"

  /v0/users/{user_id}/achievement:
    get:
      tags:
        - Users
      summary: 사용자 업적 조회
      description: <h1>사용자 업적 조회</h1>
      parameters:
        - in: header
          name: Authorization
          description: '발급받은 `Access Token` 입력'
          schema:
            $ref: "#/components/schemas/Cookie"
          required: true
        - in: path
          name: user_id
          schema:
            type: integer
            example: "유저 id"
          required: true
      responses:
        200:
          description: <h2>성공</h2>
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "object"
                  properties:
                    id:
                      type: "number"
                      example: 1
                    achievements:
                      type: "object"
                      properties:
                        id:
                          type: "number"
                          example: 1
                        title:
                          type: "string"
                          example: "첫번째 업적"
                        content:
                          type: "string"
                          example: "가입하면 주는 업적"

        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/ServerError"

  /v0/users/{user_id}/record:
    get:
      tags:
        - Users
      summary: 사용자 전적 조회
      description: <h1>사용자 전적 조회</h1>
      parameters:
        - in: header
          name: Authorization
          description: '발급받은 `Access Token` 입력'
          schema:
            $ref: "#/components/schemas/Cookie"
          required: true
        - in: path
          name: user_id
          schema:
            type: integer
            example: "유저 id"
          required: true
      responses:
        200:
          description: 아직 구현 중
          $ref: "#/components/responses/Ok"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/ServerError"

  /v0/users/profile:
    patch:
      tags:
        - Users
      summary: 사용자 프로필 수정
      description: <h1>Display name, 2단계 인증 활성/비활성 등 사용자 정보 범용적 수정 API</h1>
      parameters:
        - in: header
          name: Authorization
          description: '발급받은 `Access Token` 입력'
          schema:
            $ref: "#/components/schemas/Cookie"
          required: true
      requestBody:
        description: 수정하고 싶은 내용만 key-value 형태로 기입
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                displayName:
                  type: "string"
                  example: "seongsu"
                twoFactor:
                  type: "boolean"
                  example: "true 또는 false"

      responses:
        200:
          $ref: "#/components/responses/Ok"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/ServerError"


  /v0/users/image:
    put:
      tags:
        - Users
      summary: 사용자 프로필 사진 등록
      description: <h1>S3 저장 미들웨어에서 저장 후 image url db 저장됨</h1>
      parameters:
        - in: header
          name: Authorization
          description: '발급받은 `Access Token` 입력'
          schema:
            $ref: "#/components/schemas/Cookie"
          required: true
      requestBody:
        description: <h2>사진 확장자는 다음과 같이 제한한다.<h2> `png`, `jpeg`, `jpg`
        required: true
        content:
          mutipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  example: 사진 넣으면 됨
      responses:
        200:
          description: <h2>성공</h2>
          content:
            application/json:
              schema:
                type: object
                properties:
                  imageUrl:
                    type: string
                    example: "https://ft-transcendence.s3.ap-northeast-2.amazonaws.com/profile/85274"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/ServerError"

    delete:
      tags:
        - Users
      summary: 사용자 프로필 사진 삭제
      description: <h1>프로필 이미지가 기본 이미지로 바뀐다.</h1>
      parameters:
        - in: header
          name: Authorization
          description: '발급받은 `Access Token` 입력'
          schema:
            $ref: "#/components/schemas/Cookie"
          required: true
      responses:
        200:
          description: <h2>성공</h2>
          content:
            application/json:
              schema:
                type: object
                properties:
                  imageUrl:
                    type: string
                    example: "https://ft-transcendence.s3.ap-northeast-2.amazonaws.com/profile/default_avatar.png"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/ServerError"


# 컴포넌트 정의
components:

  # 응답
  responses:

    Ok:
      description: <h2>성공</h2>
      content:
        application/json:
          schema:
            type: "object"

    Ok-Cookie:
      description: <h2>성공, 사용자 정보가 담긴 Access, Refresh Token이 담긴 쿠키 반환</h2>
      headers:
        access_token:
          schema:
            $ref: "#/components/schemas/access_token"
        refresh_token:
          schema:
            $ref: "#/components/schemas/refresh_token"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              status:
                type: "integer"
                example: 200
              message:
                type: "string"
                example: "OK"

    BadRequest:
      description: <h2>잘못된 요청</h2><br>`필수 인자 누락, 타입 오류 등`
      content:
        application/json:
          schema:
            type: "object"
            properties:
              code:
                type: "integer"
                format: "int64"
                example: 400
              message:
                type: "string"
                example: "Bad Request"

    Unauthorized:
      description: <h2>사용자 인증 실패</h2><br>`존재하지 않는 사용자, JWT 만료, 비정상 토큰`
      content:
        application/json:
          schema:
            type: "object"
            properties:
              code:
                type: "integer"
                format: "int64"
                example: 401
              message:
                type: "string"
                example: "UnAuthorized"

    Forbidden:
      description: <h2>권한 없음</h2><br>`권한없는 API 요청`
      content:
        application/json:
          schema:
            type: "object"
            properties:
              code:
                type: "integer"
                format: "int64"
                example: 403
              message:
                type: "string"
                example: "Forbidden"

    NotFound:
      description: <h2>리소스 없음</h2><br>`존재하지 않는 API를 요청하였거나 존재하지 않는 데이터를 요청`
      content:
        application/json:
          schema:
            type: "object"
            properties:
              code:
                type: "integer"
                format: "int64"
                example: 404
              message:
                type: "string"
                example: "Not Found"

    ServerError:
      description: <h2>서버 오류</h2><br>`서버 연결상태 불량, 특정 코드 오류 등`
      content:
        application/json:
          schema:
            type: "object"
            properties:
              code:
                type: "integer"
                example: 500
              message:
                type: "string"
                example: "Internal Server Error"

  # 스키마
  schemas:

    # 유틸 스키마
    encrypted-name:
      type: "string"
      example: "서버 session의 client식별자인 암호화 된 사용자 이름"

    sign:
      type: "string"
      example: "추가 정보 입력에 필요한 Token"

    access_token:
      type: "string"
      example: "API 통신에 필요한 Access Token"

    refresh_token:
      type: "string"
      example: "Access Token 재발급에 필요한 Refresh Token"

    Cookie:
      type: "string"
      example: "Bearer \"이곳에 Token 입력\""



externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
