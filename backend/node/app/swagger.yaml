openapi: 3.0.0
info:
  description: "트센 API 명세"
  version: "1.1.0"
  title: "ft_transcendance"
  termsOfService: "https://"
  contact:
    email: "nfl1ryxditimo12@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
servers:
  - url: 'http://localhost:5000/v0'

# API 카테고리
tags:
  - name: Auth
    description: 사용자 인증 API
  - name: Sockets
    description: 소켓 통신 API
  - name: Users
    description: 사용자 & 관리자 정보 API

      # - in: header
      #   name: access_token
      #   schema:
      #     type: "string"
      #     example: 발급받은 Access Toekn 입력
      #   required: true
      # - in: header
      #   name: refresh_token
      #   schema:
      #     type: "string"
      #     example: 발급받은 Refresh Toekn 입력
      #   required: true

      # tags:
      # -
      # summary:
      # description: <h1></h1><br><br><h2>Permission</h2>`사용자` `사장님` `관리자`<br><br><h2>이 Api는 현재</h2>`기획중` `개발중` `완료`
      # parameters:
      #   - in: header
      #     name: access_token
      #     schema:
      #       type: "string"
      #       example: 발급받은 Access Toekn 입력
      #     required: true
      #   - in: header
      #     name: refresh_token
      #     schema:
      #       type: "string"
      #       example: 발급받은 Refresh Toekn 입력
      #     required: true
      # requestBody:
      #   description:
      #   required: true
      #   content:
      #     application/json:
      #       schema:
      # responses:
      #   200:
      #     $ref: "#/components/responses/Ok"
      #   400:
      #     $ref: "#/components/responses/BadRequest"
      #   401:
      #     $ref: "#/components/responses/Unauthorized"
      #   500:
    #     $ref: "#/components/responses/ServerError"

# API 문서
paths:

  # 인증 API
  /v0/auth/login:
    get:
      tags:
        - Auth
      summary: 로그인
      description: <h1>42 OAuth를 이용한 로그인<br>42 Login Page로 리다이렉션 될 거임<h1/>
      responses:
        301:
          description: 42 Login page redirection
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/ServerError"

  /v0/auth/login/callback:
    get:
      tags:
        - Auth
      summary: 로그인 콜백
      description: <h1>42 OAuth redirect uri<h1/><br>로그인이 완료된 시점이니 메모리에 사용자 정보가 저장 될 거임<br><br><h2>2단계 인증이 활성화 되어있는 경우 204 status와 인증코드가 해싱된 토큰이 반환되며, 사용자의 이메일로 인증 코드가 발송된다.</h2>
      parameters:
        - in: query
          name: code
          schema:
            type: string
            example: 42 OAuth 인가코드 들어갈거임
          required: true
      responses:
        200:
          description: <h2>성공, 사용자 정보가 담긴 Access, Refresh Token이 담긴 쿠키 반환</h2>
          headers:
            access_token:
              schema:
                $ref: "#/components/schemas/access_token"
            refresh_token:
              schema:
                $ref: "#/components/schemas/refresh_token"
          content:
            application/json:
              schema:
                type: "object"
        204:
          description: <h2>로그인 성공, 2단계 인증 추가 필요</h2>
          headers:
            code:
              schema:
                type: "string"
                example: 해싱된 이메일 인증코드가 담겨있음
          content:
            application/json:
              schema:
                type: "object"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/ServerError"

  /v0/auth/logout:
    get:
      tags:
        - Auth
      summary: 로그아웃
      description: <h1>서버 세션에서 클라이언트 정보 삭제됨</h1>
      parameters:
        - in: header
          name: Authorization
          schema:
            $ref: "#/components/schemas/Cookie"
          required: true

      responses:
        200:
          $ref: "#/components/responses/Ok"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/ServerError"

  /v0/auth/email:
    post:
      tags:
        - Auth
      summary: 이메일 인증번호 확인
      description: <h1>개별 인증번호 확인</h1>
      parameters:
        - in: header
          name: Authorization
          schema:
            $ref: "#/components/schemas/Cookie"
          required: true
      responses:
        301:
          # 내일 redirection으로 수정해함. 한번 실습 후 수정 예정
          $ref: "#/components/responses/Ok"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/ServerError"

    get:
      tags:
        - Auth
      summary: 이메일로 인증번호 전송
      description: <h1>인증번호를 포함한 메일 전송</h1>
      parameters:
        - in: header
          name: Cookie
          schema:
            $ref: "#/components/schemas/Cookie"
          required: true
      responses:
        200:
          $ref: "#/components/responses/Ok"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/ServerError"


  # Socket

  /v0/socket/syn:
    get:
      tags:
        - Sockets
      summary: 소켓 연결 요청
      description: <h1>소켓 연결 요청</h1>
      parameters:
        - in: header
          name: Cookie
          schema:
            $ref: "#/components/schemas/Cookie"
          required: true
      responses:
        101:
          $ref: "#/components/responses/Switching-Protocols"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/ServerError"

  # Users

  /v0/users/{user_id}/profile:
    patch:
      tags:
        - Users
      summary: 사용자 프로필 수정
      description: <h1>Display name, 2단계 인증 활성/비활성 등 사용자 정보 범용적 수정 API</h1>
      parameters:
        - in: header
          name: Cookie
          schema:
            $ref: "#/components/schemas/Cookie"
          required: true
        - in: path
          name: user_id
          schema:
            type: integer
            example: "유저 id"
          required: true
      requestBody:
        description: 수정하고 싶은 내용만 key-value 형태로 기입
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                name:
                  type: "string"
                  example: "seongsu"
                two_factor:
                  type: "boolean"
                  example: "true 또는 false"

      responses:
        200:
          $ref: "#/components/responses/Ok"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/ServerError"

    get:
      tags:
        - Users
      summary: 사용자 프로필 조회
      description: <h1>사용자 프로필 조회</h1>
      parameters:
        - in: header
          name: Cookie
          schema:
            $ref: "#/components/schemas/Cookie"
          required: true
        - in: path
          name: user_id
          schema:
            type: integer
            example: "유저 id"
          required: true
      responses:
        200:
          $ref: "#/components/responses/Ok"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/ServerError"

  /v0/users/{user_id}/achievement:
    get:
      tags:
        - Users
      summary: 사용자 업적 조회
      description: <h1>사용자 업적 조회</h1>
      parameters:
        - in: header
          name: Cookie
          schema:
            $ref: "#/components/schemas/Cookie"
          required: true
        - in: path
          name: user_id
          schema:
            type: integer
            example: "유저 id"
          required: true
      responses:
        200:
          $ref: "#/components/responses/Ok"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/ServerError"

  /v0/users/{user_id}/record:
    get:
      tags:
        - Users
      summary: 사용자 전적 조회
      description: <h1>사용자 전적 조회</h1>
      parameters:
        - in: header
          name: Cookie
          schema:
            $ref: "#/components/schemas/Cookie"
          required: true
        - in: path
          name: user_id
          schema:
            type: integer
            example: "유저 id"
          required: true
      responses:
        200:
          $ref: "#/components/responses/Ok"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/ServerError"

  /v0/users/{user_id}/follow:
    post:
      tags:
        - Users
      summary: 사용자 팔로우 신청
      description: <h1>사용자 팔로우 신청</h1>
      parameters:
        - in: header
          name: Cookie
          schema:
            $ref: "#/components/schemas/Cookie"
          required: true
        - in: path
          name: user_id
          schema:
            type: integer
            example: "유저 id"
          required: true
        - in: query
          name: target
          schema:
            type: string
            example: "1"
          required: true
      # requestBody:
      #   description: "<h2>target에 팔로우 할 사용자 id 입력</h2>"
      #   content:
      #     application/json:
      #       schema:
      #         type: "object"
      #         properties:
      #           target:
      #             type: "string"
      #             example: "1"
      responses:
        200:
          $ref: "#/components/responses/Ok"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/ServerError"

    get:
      tags:
        - Users
      summary: 사용자 팔로잉/팔로워 조회
      description: <h1>Query에 들어오는 string에 따라 다른 결과 반환</h1>
      parameters:
        - in: header
          name: Cookie
          schema:
            $ref: "#/components/schemas/Cookie"
          required: true
        - in: path
          name: user_id
          schema:
            type: integer
            example: "유저 id"
          required: true
        - in: query
          name: target
          schema:
            type: string
            example: "following 또는 follower"
          required: true
      responses:
        200:
          $ref: "#/components/responses/Ok"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/ServerError"

    delete:
      tags:
        - Users
      summary: 사용자 팔로우 취소
      description: <h1>Query에 들어오는 target이 취소될 사용자</h1>
      parameters:
        - in: header
          name: Cookie
          schema:
            $ref: "#/components/schemas/Cookie"
          required: true
        - in: path
          name: user_id
          schema:
            type: integer
            example: "유저 id"
          required: true
        - in: query
          name: target
          schema:
            type: string
            example: "1"
          required: true
      responses:
        200:
          $ref: "#/components/responses/Ok"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/ServerError"

  /v0/users/{user_id}/image:
    post:
      tags:
        - Users
      summary: 사용자 프로필 사진 등록
      description: <h1>S3 저장 미들웨어에서 저장 후 image url db 저장됨</h1>
      parameters:
        - in: header
          name: Cookie
          schema:
            $ref: "#/components/schemas/Cookie"
          required: true
        - in: path
          name: user_id
          schema:
            type: integer
            example: "유저 id"
          required: true
      requestBody:
        description: <h2>발급받은 카카오 Access Token을 넣어 요청해야함<h2>
        required: true
        content:
          mutipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  example: 사진 넣으면 됨
      responses:
        200:
          $ref: "#/components/responses/Ok"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/ServerError"

    delete:
      tags:
        - Users
      summary: 사용자 프로필 사진 삭제
      description: <h1>S3에 올라간 프로필 사진이 삭제되며, 올린적이 없는 경우 400 Error, 삭제 후 기본 이미지로 바뀐다.</h1>
      parameters:
        - in: header
          name: Cookie
          schema:
            $ref: "#/components/schemas/Cookie"
          required: true
        - in: path
          name: user_id
          schema:
            type: integer
            example: "유저 id"
          required: true
      responses:
        200:
          $ref: "#/components/responses/Ok"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/ServerError"


# 컴포넌트 정의
components:

  # 응답
  responses:

    Switching-Protocols:
      description: <h2>소켓으로 프로토콜 변경</h2>
      headers:
        Sec-WebSocket-Accept:
          description: 고유 Socket Key가 담길 거임
          schema:
            type: "string"
        Sec-WebSocket-Protocol:
          description: 어떤 프로토콜인지 알려줌
          schema:
            type: "string"
            example: "chat"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              Sec-WebSocket-Accept:
                type: "string"
                example: 고유 Socket Key가 담길 거임
              Sec-WebSocket-Protocol:
                type: "string"
                example: "chat"
                nullable: false
              channels:
                type: "array"
                items:
                  type: "object"
                  properties:
                    channelId:
                      type: "string"
                      example: "[uuid같은 channel identifier]"
                    channelName:
                      type: "string"
                      example: "mtak lovers"
                    isGameActive:
                      type: "boolean"
                      example: true
              activeUsers:
                type: "array"
                items:
                  type: "object"
                  properties:
                    userId:
                      type: "integer"
                      example: "1"
                    userName:
                      type: "string"
                      example: "mtak"
                    socketId:
                      type: "string"
                      example: "ojIckSD2jqNzOqIrAGzL"
                    inGame:
                      type: "boolean"
                      example: false
                    # friends:
                    #   type: "array"
                    #   items:
                    #     type: "object"
                    #     properties:
                    # 이부분 수정해야함 모든 유저와 친구 목록 둘다 똑같은 엔티티로 들어감

              loginUser:
                type: "object"
                properties:
                  userId:
                    type: "integer"
                    example: "1"
                  userName:
                    type: "string"
                    example: "seonkim"

    Ok:
      description: <h2>성공</h2>
      content:
        application/json:
          schema:
            type: "object"

    Ok-Cookie:
      description: <h2>성공, encrypted-name이 담긴 쿠키 반환</h2>
      headers:
        encrypted-name:
          schema:
            $ref: "#/components/schemas/encrypted-name"
      content:
        application/json:
          schema:
            type: "object"

    BadRequest:
      description: <h2>잘못된 요청</h2><br>`필수 인자 누락, 타입 오류 등`
      content:
        application/json:
          schema:
            type: "object"
            properties:
              code:
                type: "integer"
                format: "int64"
                example: 400
              message:
                type: "string"
                example: "Bad Request"

    Unauthorized:
      description: <h2>사용자 인증 실패</h2><br>`존재하지 않는 사용자, JWT 만료, 비정상 토큰`
      content:
        application/json:
          schema:
            type: "object"
            properties:
              code:
                type: "integer"
                format: "int64"
                example: 401
              message:
                type: "string"
                example: "UnAuthorized"

    Forbidden:
      description: <h2>권한 없음</h2><br>`권한없는 API 요청`
      content:
        application/json:
          schema:
            type: "object"
            properties:
              code:
                type: "integer"
                format: "int64"
                example: 403
              message:
                type: "string"
                example: "Forbidden"

    NotFound:
      description: <h2>리소스 없음</h2><br>`존재하지 않는 API를 요청하였거나 존재하지 않는 데이터를 요청`
      content:
        application/json:
          schema:
            type: "object"
            properties:
              code:
                type: "integer"
                format: "int64"
                example: 404
              message:
                type: "string"
                example: "Not Found"

    ServerError:
      description: <h2>서버 오류</h2><br>`서버 연결상태 불량, 특정 코드 오류 등`
      content:
        application/json:
          schema:
            type: "object"
            properties:
              code:
                type: "integer"
                example: 500
              message:
                type: "string"
                example: "Internal Server Error"

  # 스키마
  schemas:

    # 유틸 스키마
    encrypted-name:
      type: "string"
      example: "서버 session의 client식별자인 암호화 된 사용자 이름"

    access_token:
      type: "string"
      example: "API 통신에 필요한 Access Token"

    refresh_token:
      type: "string"
      example: "Access Token 재발급에 필요한 Refresh Token"

    Cookie:
      type: "string"
      example: "Bearer \"이곳에 Access Token 입력\""



externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"